import numpy as np

def storm_vulnerability_model(wind_speed, asset_type, building_quality, exposure_duration):
    """
    Modèle de vulnérabilité qui évalue les dommages potentiels en fonction de la vitesse du vent,
    du type de bien, de la qualité de la construction et de la durée d'exposition.
    
    Args:
    - wind_speed (float): Vitesse du vent en km/h.
    - asset_type (str): Type de bien (ex. 'Residential', 'Commercial', 'Industrial').
    - building_quality (str): Qualité de la construction ('Low', 'Medium', 'High').
    - exposure_duration (float): Durée d'exposition aux vents forts en heures.
    
    Returns:
    - damage_ratio (float): Pourcentage de dommages estimés (entre 0 et 1).
    """
    
    # Courbe de vulnérabilité en fonction de la vitesse du vent (fonction continue)
    if wind_speed < 30:
        base_damage_ratio = 0.01  # Dommages très faibles
    elif wind_speed < 70:
        base_damage_ratio = 0.05 + (wind_speed - 30) / 100  # Progression linéaire des dommages
    elif wind_speed < 120:
        base_damage_ratio = 0.1 + (wind_speed - 70) / 50    # Progression plus rapide
    else:
        base_damage_ratio = 0.5 + (wind_speed - 120) / 30   # Dommages très importants
    
    # Facteurs de correction basés sur le type de bien (les biens industriels sont souvent plus robustes)
    asset_type_factors = {
        'Residential': 1.0,  # Par défaut
        'Commercial': 0.9,   # Légèrement plus robuste
        'Industrial': 0.7    # Plus robuste
    }
    asset_factor = asset_type_factors.get(asset_type, 1.0)  # Si inconnu, on suppose résidentiel

    # Ajustement basé sur la qualité du bâtiment
    building_quality_factors = {
        'Low': 1.2,    # Faible qualité, plus vulnérable
        'Medium': 1.0,  # Qualité moyenne
        'High': 0.7    # Haute qualité, moins vulnérable
    }
    quality_factor = building_quality_factors.get(building_quality, 1.0)  # Par défaut, qualité moyenne
    
    # Ajustement basé sur la durée d'exposition
    if exposure_duration <= 1:
        exposure_factor = 1.0  # Dommages normaux pour une exposition courte
    else:
        exposure_factor = 1.0 + np.log(exposure_duration) * 0.05  # Les dommages augmentent logarithmiquement
    
    # Calcul final du ratio de dommages
    damage_ratio = base_damage_ratio * asset_factor * quality_factor * exposure_factor
    # Limiter le ratio de dommages entre 0 et 1
    damage_ratio = min(max(damage_ratio, 0), 1)
    
    return damage_ratio

